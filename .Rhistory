# Plot attitude and education
plot(t(tabAE), main="Attitude towards corporl punishment by education",
las=1, cex.axis=0.85)
barplot(tabAErel, beside = TRUE,ylim = c(0,1),
main = "Attitudes towards corporal punishment", las=1)
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
# Second plot
par(mfrow=c(2,1))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.6), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.7), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.70), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.90), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.80), xpd=NA))
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x= "bottom", ncol=2, bty="n", inset=c(0,-0.70), xpd=NA))
barplot(tabAErel, beside = TRUE, ylim = c(0,1),
main = "Attitudes towards corporal punishment", las=1)
barplot(tabAErel, ylim = c(0,1),
main="Attitudes towards corporal punishment",
las = 1, legend=TRUE,
args.legend = list(x="bottom", ncol=2, bty="n", inset=c(0,-0.70), xpd=NA))
# Inspect table object
str(tabAE)
str(tabAErel)
attributes(tabAE)
attributes(tabAErel)
?indentical
?identical
identical(attributes(tabAE), attributes(tabAErel))
identical(attributes(tabAE), attributes(tabAErel)[c(1,4,2: 3)])
identical(attributes(tabAE), attributes(tabAErel)[c(1,4,2,3)])
a
a <- 3
a
X <- rnorm(1000, -3, 0.25)
X
X <- rnorm(1000, -3, 0.25)
p_x <- pnorm(-2.5, mean=-3, sd=0.25, lower.tail=FALSE)
p_x
p_x <- pnorm(-2.5, mean=-3, sd=0.25, lower.tail=TRUE)
p_x
?pnorm
?pnorm
s_x <- qnorm(-2.5, mean=-3, sd=0.25, lower.tail=FALSE, log.p=FALSE)
s_x
g_x <- qnorm(-2.5, mean=-3, sd=0.25, lower.tail=TRUE, log.p=FALSE)
g_x
s_x <- qnorm(-2.5, mean=-3, sd=0.25, lower.tail=FALSE, log.p=FALSE)
s_x
p_x <- pnorm(-2.5, mean=-3, sd=0.25, lower.tail=TRUE)
p_x
g_x <- pnorm(-2.5, mean=-3, sd=0.25, lower.tail=TRUE)
g_x
s_x <- pnorm(-2.5, mean=-3, sd=0.25, lower.tail=FALSE)
s_x
g_x+s_x
set.seed(2)
x=matrix(rnorm(50*2),ncol=2)
install.packages('knitr', dependencies = TRUE)
set.seed(2)
set.seed(2)
x=matrix(rnorm(50*2),ncol=2)
x[1:25,1]<-x[1:25,1]+2
x[1:25,2]<-x[1:25,2]-2
plot(x,pch=16)
print(x)
km.out<-kmeans(x,centers=2,nstart=1) #run with two clusters
km.out$cluster #a vector specifying which cluster each row belongs to
names(km.out) #all the different outputs from kmeans
km.out$totss #the sum of squares without clustering
km.out$tot.withinss #the sum of squares with this clustering
km.out$withinss #the sum of squares within each cluster
km.out$centers #Matrix with the center coordinates
plot(x,col=km.out$cluster+1,pch=16) #plot the poiunts colorfed by cluster
points(km.out$centers,col=2:3,pch=3) #add the cluster centers
km.out<-kmeans(x,centers=2,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
points(km.out$centers,col=2:3,pch=3)
km.out$tot.withinss
set.seed(4)
km.out<-kmeans(x,centers=3,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
km.out<-kmeans(x,centers=4,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
km.out$tot.withinss
x<-matrix(rnorm(50*3),ncol=2)
x[1:25,1]<-x[1:25,1]+2
x[1:25,1]<-x[1:25,1]+2
x[1:25,2]<-x[1:25,2]-2
x[50+1:25,1]<-x[50+1:25,1]+2
x[50+1:25,2]<-x[50+1:25,2]+2
km.out<-kmeans(x,3,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
points(km.out$centers,col=2:4,pch=3)
km.out$tot.withinss
set.seed(4)
km.out<-kmeans(x,centers=3,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
km.out<-kmeans(x,centers=4,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
km.out$tot.withinss
x<-matrix(rnorm(50*3),ncol=2)
x[1:25,1]<-x[1:25,1]+2
x[1:25,2]<-x[1:25,2]-2
x[50+1:25,1]<-x[50+1:25,1]+2
x[50+1:25,2]<-x[50+1:25,2]+2
km.out<-kmeans(x,3,nstart=20)
plot(x,col=km.out$cluster+1,pch=16)
points(km.out$centers,col=2:4,pch=3)
km.out$tot.withinss
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
library(mdsr)
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("Rcpp")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(Rcpp)
library(dplyr)
library(mdsr)
install.packages("mdsr")
install.packages("mdsr")
install.packages("mdsr")
q()
R.version.string
cls
x <- c(0.5, 0.6)
print(typeof(x))
x <- c(0.5, 6)
print(typeof(x))
x <- c(0.5, 0.6)
print(typeof(x))
x <- c(TRUE, FALSE)
print(typeof(x))
x <- c(T, F)
print(typeof(x))
x <- c("a", "b", "c")
print(typeof(x))
x <- 9:29
print(typeof(x))
x <- c(1+0i, 2+4i)
print(typeof(x))
x <- c(1.7, "a")
print(typeof(x))
x <- c(1.7, "a", 6L)
print(typeof(x))
x <- c(TRUE, 2)
print(typeof(x))
x <- c("a", TRUE, 1)
print(typeof(x))
x <- c("a", c(TRUE, 1))
print(typeof(x))
x <- c(1+2i, c(TRUE, 1))
print(typeof(x))
"a"
x <- c("a", c(TRUE, 1))
print(typeof(x))
print(class(x))
# Explicit Coercion
x <- 0:6
class(x)
x <- as.numeric(x)
class(x)
# Explicit Coercion
x <- 0:6
class(x) # integer
y <- as.numeric(x)
class(y)
y <- as.logical(x)
class(y)
y <- as.character(x)
class(y)
y <- as.character(x)
class(y)
y
y <- as.complex(x)
class(y)
# Nonsensical coercion results in NAs.
x <- c("a", "b", "c")
class(x)
y <- as.logical(x)
class(y)
# Nonsensical coercion results in NAs.
x <- c("a", "b", "c")
y <- as.numeric(x)
class(y)
print(y)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
# levels could be set by using lavels arguments
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
table(x)
unclass(x)
# Reorder and Levels of a factor
x
relevel(x, ref="no")
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels = c(TRUE, FALSE),
levels = c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels = c(TRUE, FALSE),
levels = c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam, levels = c(TRUE, FALSE), levels = c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels=c("success", "failure"))
exam <- factor(exam,
levels = c(TRUE, FALSE),
levels = c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels = c(TRUE, FALSE),
levels = c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels=c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels=c("success", "failure"))
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
levels=c("success", "failure"))
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels = c("success", "failure"))
print(exam)
table(exam)
## New and relabeled Levels
exam <- c(TRUE, TRUE, FALSE, TRUE, FALSE)
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels = c("success", "failure"))\
exam <- factor(exam,
levels=c(TRUE, FALSE),
labels = c("success", "failure"))
print(exam)
table(exam)
x <- data.frame(eggs = 1:4, ham = c(TRUE, TRUE, FALSE, FALSE))
print(x)
print(nrow(x))
print(ncol(x)) # number of column
print(dim(x)) # total dimension
x <- data.frame(my_num = 1:4,
my_char = "a",
my_logic = c(TRUE, FALSE, FALSE, TRUE))
print(x)
str(x)
x <- list(1, "a", TRUE)
print(typeof(x))
print(x)
x <- list(1, 2, "a", TRUE)
print(typeof(x))
print(x)
x <- list(a = 1,
b = list(1, 2),
c = data.frame(x = 1:2))
print(x)
str(x)
x <- 5:15
x
# Preparations
rm(list = ls(all.names = TRUE))
x <- 5:15
x
quantile(x, probs = 0.5)
quantile(x, probs = 0.1)
quantile(x, probs = c(0.1, 0.11))
0.11*11
quantile(x)
# Deciles
quantile(x, probs = 1:9/10)
# Percentiles
quantile(x, prob = 1:99/100)
# BMI
bmi <- c(18.13, 18.53, 20.75, 21.86, 22.65, 22.93, 22.95, 23.75, 23.82, 24.01, 24.68, 24.89, 25.25,
25.75, 25.85, 25.9, 26.11, 26.73, 27.2, 27.67, 27.94, 28.19, 29.29, 31.22, 32.37)
boxplot(bmi)
# Preparations
rm(list = ls(all.names = TRUE))
# data set loading
df <- read.csv('dataset/transformed_clean_data.csv')
setwd('C:\\Users\\DELL\\Desktop\\Bike_history_project')
# data set loading
df <- read.csv('dataset/transformed_clean_data.csv')
head(df)
# attach the variables
attach(df)
barplot(member_type)
plot(member_type)
table(member_type)
plot(table(member_type))
barplot(table(member_type))
table(member_type, rideable_type)
tab <- table(member_type, rideable_type)
barplot(tab)
library(ggplot2)
ggplot(data = df, aes(x = member_type, y = rideable_type))
# Create a scatter plot
plot(data$variable1, data$variable2, pch = 16,
xlab = "Variable 1", ylab = "Variable 2",
main = "Scatter Plot")
# Create a data frame with your data
data <- data.frame(variable1 = c("Category A", "Category B", "Category C"),
variable2 = c("Type X", "Type Y", "Type X"),
count = c(10, 8, 5))
# Create a grouped bar chart
ggplot(data, aes(x = variable1, y = count, fill = variable2)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Variable 1") +
ylab("Count") +
ggtitle("Grouped Bar Chart")
# Create a grouped bar chart
ggplot(tab, aes(x = member_type, y = count, fill = rideable_type)) +
geom_bar(stat = "identity", position = "dodge") +
xlab("Variable 1") +
ylab("Count") +
ggtitle("Grouped Bar Chart")
# load ggplot2 and penguin data set
library(ggplot2)
library("palmerpenguins")
# print column names
colnames(penguins)
# plot the data
ggplot(data = penguins) +
geom_point(mapping =  aes(x=flipper_length_mm, y=body_mass_g))
# used different color for each type of penguins
ggplot(data = penguins) +
geom_point(mapping =  aes(x=flipper_length_mm, y=body_mass_g, color = species))
# used different shape for each type of penguins
ggplot(data = penguins) +
geom_point(mapping =  aes(x=flipper_length_mm, y=body_mass_g, shape = species, color=species))
# color all the points to purple
ggplot(data = penguins) +
geom_point(mapping =  aes(x=flipper_length_mm, y=body_mass_g), color='purple')
attach(penguins)
# plot the data in a line
ggplot(data = penguins) +
geom_smooth(mapping = aes(x=flipper_length_mm, y=body_mass_g, linetype = species)) +
geom_point(mapping = aes(x=flipper_length_mm, y = body_mass_g))
# plot data with jitter
ggplot(data = penguins) +
geom_jitter(mapping = aes(x=flipper_length_mm, y = body_mass_g))
attach(diamonds)
# bar plot for diamond data set
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity))
ggplot(data = df) +
geom_bar(mapping = aes(x=member_type, fill = rideable_type))
tab <- table(member_type, rideable_type); tab
# get null Counts
null_counts <- sapply(df, function(x) sum(is.na(x)))
print(null_counts)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all.names = TRUE))
gc()
df <- read.csv('dataset/transformed_clean_data.csv')
getwd()
df <- read.csv('../dataset/transformed_clean_data.csv')
gc()
head(df)
df <- read.csv('../dataset/transformed_clean_data.csv')
gc()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all.names = TRUE))
df <- read.csv('../dataset/transformed_clean_data.csv')
print(null_counts)
null_counts <- sapply(df, function(x) sum(is.na(x)))
print(null_counts)
type(null_counts)
class(null_counts)
null_counts <- sapply(df, function(x) sum(is.na(x)))
print(null_counts)
null_counts <- sapply(df, function(x) sum(is.na(x)))
print(null_counts)
### Get the month column
months <- df %>% sample_n(100)
months <- df %>% sample_n(100)
months <- df %>% sample_n(100)
library("tidyverse")
months <- df %>% sample_n(100)
months
start_date <- month(months$started_at); start_date
library("ggplot2")
table(start_date)
plot(table(start_date))
barplot(table(start_date))
barplot(table(start_date))
library("tidyverse")
library("ggplot2")
start_date <- month(months$started_at); start_date
start_date <- month.name(months$started_at); start_date
start_date <- format(months$started_at, '%b'); start_date
start_date <- format(months$started_at, "%B"); start_date
start_date <- format(as.Date(months$started_at), "%B"); start_date
start_date <- format(as.Date(months$started_at), "%b"); start_date
barplot(table(start_date))
months <- df %>% sample_n(100)
month_list <- list("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
start_date <- format(as.Date(months$started_at), "%b"); start_date
barplot(table(start_date))
months <- df %>% sample_n(100)
month_list <- list("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
start_date <- format(as.Date(months$started_at), "%b"); start_date
barplot(table(start_date))
barplot(table(format(as.Date(df$started_at), "%b")))
month_tab <- table(format(as.Date(df$started_at), "%b")); month_tab
print(distinct(ride_id))
print(unique(ride_id))
print(paste0('Total Number of unique ride id is: ', length(unique(ride_id))))
rm(list = ls(all.names = TRUE))
